package com.justinmichaud.remotesupport.client.ui;

import com.barchart.udt.ExceptionUDT;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.justinmichaud.remotesupport.client.PublicConnection;
import com.justinmichaud.remotesupport.client.tunnel.TunnelEventHandler;
import com.justinmichaud.remotesupport.common.WorkerThreadManager;
import io.netty.channel.ChannelFuture;
import org.bouncycastle.util.io.TeeOutputStream;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.PrintStream;
import java.net.InetSocketAddress;

public class ConnectForm {

    private JPanel root;
    private JTextField txtDiscoveryServer;
    private JButton connectButton;
    private JTextArea txtConsole;

    public ConnectForm(JFrame frame) {
        frame.setTitle("Remote Support");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setMinimumSize(new Dimension(500, 450));
        frame.pack();
        frame.setLocationRelativeTo(null); // Move to center of screen
        frame.setVisible(true);

        txtDiscoveryServer.setText("172.16.1.216");

        JTextAreaOutputStream txtOut = new JTextAreaOutputStream(txtConsole);
        System.setOut(new PrintStream(new TeeOutputStream(System.out, txtOut)));

        connectButton.addActionListener(e -> {
            connectButton.setEnabled(false);

            InetSocketAddress addr = new InetSocketAddress(txtDiscoveryServer.getText(), 40000);

            //TODO Temporary
            WorkerThreadManager workerThreadManager = new WorkerThreadManager(null);
            final PublicConnection[] publicConnection = new PublicConnection[1];
            TunnelEventHandler eh = new TunnelEventHandler() {
                @Override
                public String prompt(String msg) {
                    return JOptionPane.showInputDialog(
                            frame,
                            msg,
                            "Question",
                            JOptionPane.PLAIN_MESSAGE);
                }

                @Override
                public void start(ChannelFuture f) {
                    super.start(f);

                    frame.setContentPane(new PeerForm(frame, this, txtOut).root);
                    frame.pack();
                }

                @Override
                public void connectionClosed() {
                    super.connectionClosed();
                    frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
                }

                @Override
                public void discoveryServerConnected() {
                    System.out.println("Connected to public server!");
                    String partner = prompt("Who would you like to connect to? Leave empty if nobody.");
                    if (!partner.isEmpty()) {
                        try {
                            publicConnection[0].connect(partner);
                        } catch (IOException e) {
                            System.out.println("Error connecting to partner");
                            workerThreadManager.stop();
                        }
                    }
                }
            };
            try {
                publicConnection[0] = new PublicConnection(addr, eh.prompt("What is your username?"), eh);
                workerThreadManager.makeGroup("PublicConnection", null).addWorkerThread(publicConnection[0]);
            } catch (ExceptionUDT exceptionUDT) {
                exceptionUDT.printStackTrace();
                workerThreadManager.stop();
            }
        });
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException
                | InstantiationException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }

        JFrame frame = new JFrame("Remote Support");
        frame.setContentPane(new ConnectForm(frame).root);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
        root.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-4473925)), "Remote Support"));
        final JLabel label1 = new JLabel();
        label1.setText("Discovery Server");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtDiscoveryServer = new JTextField();
        root.add(txtDiscoveryServer, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        txtConsole = new JTextArea();
        txtConsole.setEditable(false);
        root.add(txtConsole, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        connectButton = new JButton();
        connectButton.setText("Connect");
        root.add(connectButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }
}
